Designing RESTful APIs

You must understand the business process that you're going to model
HTTP is our medium

API Design must be deliberate:
- functionality to expose
- best way to expise it
- test assumptions + user testing

Challenges of good API design
- clear naming
- clear directions
- knowledge of use case
- adaptability
- versioning
- backward capability

Affordance: something that allows you to perform an action or accomplish a goal

Focus on the intersection of:  What the API does + What the API makes easy + What the User wants to do

Adding an API:
- Bolt-on Strategy: for existing systems; takes advantage of existing code and systems
- Greenfield Strategy: for new systems; API-first mindset -- take use of new technologies
- Facade: replacing piece by piece; ideal for legacy systems; can be tough to manage

API Modeling is a key to success
1. Don't worry about the tools
2. Have a consistent process
3. It doesn't count unless it's written down / Documentation is non-negotiable

API Modeling Process
1. Identify the participants (i.e. the end users)
2. Identify the activities
3. Break the activities into specific steps (i.e. who does what)
4. Create API definitions -- map the nouns to the HTTP verbs (Get, Delete, Put, Post)
  - Get retrieves data
  - Delete data
  - Put updates an existing record
  - Post create or catch-all
5. Validate API
  - Step through API calls
  - Write code as if the API exists / Write documentation as if the API exists
  - Look for gaps and potential issues

REST is a set of principles and constraints
- Few requirements
- Docs discovered as you go
- Flexible, based on needs
- Flexible, based on patterns

Every HTTP Request and Response has two parts: Headers and Payload

HTTP 2xx Response Codes:
- 200 OK = Request was successful
- 201 Created = Resource was created
- 202 Accepted = Action has started
- 204 No Content = Delete a resource

HTTP 3xx Response Codes:
- 301 = Moved permanently
- 302 = Moved temporarily

HTTP 4xx Response Codes:
- 400 = Bad request
- 401 = Authentication
- 403 = Forbiden
- 404 = Not found
Do not create your own error codes

100-199 = Informational
200-299 = Success
300-399 = Redirect
400-499 = Client Error
500-599 = Server Error

Content-Type = type of payload being provided by the server

REST API Constraints
1. Client-server architecture
2. Stateless architecture
- Every request should be able to execute on its own independently of other requests
3. Cacheable
- Know when to return results, instead of doing the work
4. Layered systems
- Clients may not connect directly with the server
5. Code on demand (optional)
- When a client requests a resource, it also receives the code to act upon it
6  Uniform interfaces
  a. Identification of resources
  b. Manipulation of resources through these representations
  c. Self-descriptive messages
  d. Hypermedia as the engine of application state (HATEOAS)


Idempotent or Safe Commands
- GET, PUT, and DELETE
  - The state of resources on the server is exactly the same after repeated commands
- POST
  - 


Authentication (Authn)
- Establish who you are
- Login with credentials

Authorization (Authz)
- Establish your permissions
- Restricted access

API Keys:
  Benefits
  - Easy to add to header or URL
  - Framework and programming language agnostic

  Drawbacks
  - URLs are not secrete
  - Difficult to update/rotate if compromised

OAuth 2.0 is the recommended approach for authentication
  Benefits
  - Reliable and well estabslished
  - Massive ecosystem
  - Open-source and commercial

  Drawbacks:
  - Complicated
  - Initial implementation can be time consuming

API Versioning
- Versioning in URL vs. the Accept Header

The accept header tells the API the data types and formats the client understands

Content Negotiation in the Accept Header
- Establish the markup or notation
- Establish the media type
- Establish the version of the media type and resource

Content Negotiation is Ideal
- The client can ask for the version that best fits their needs

Large-Scale APIs
- Optimize for clarity of purpose and ease of use

Content Negotiation in the URL
- Clear and explicit
- Nothing is lost with copy/paste

All APIs in an organization should take the same versioning approach
- Simplify training
- Increase predictability for users
- Maintain clarity

Hypermedia in common in APIs: non-linear -- no specified beginning, middle, or end

HTTP Headers
- Response codes
- Versioning
- Content Negotiation
  - It happens implicitly as you're navigating the web
- Caching
  - ETags Request and Response: 1. Client makes request; 2. Server responds and creates an ETag; 3. Client makes a HEAD request; 4. If the data is unchanged, the server returns the same ETag; 5. if the data has changed, the server returns a new ETag; 6. If the ETag is changed, the client makes the full request

Documentation approaches
- Don't distribute a PDF
- Don't use WordPress or other basic CMS

What are our documentation goals?
- We need snippet-friendly code
- We need page history, specifically user facing
- We need something that is easy to update
- Searchable - if we can't find it, it doesn't exist

Documentation via Wiki is actually decent (i.e. Confluence, MediaWiki)

